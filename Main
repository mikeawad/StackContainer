/*------------------------------------------------------------
        Driver Program for STL Stack Template
  ------------------------------------------------------------*/
#include <iostream>     // needed for cout/cin
#include <stack>        // needed for STL stack sequential container
#include <string>       // needed for string class

using namespace std;

int main()
{
#include <iostream>
#include <stack>
#include <string>

using namespace std;

int main()
{
    stack<char> iStack;

    string userExpression;
    bool lFound = false,
         malForm = false;

    cout << "Enter expression: ";
    getline(cin, userExpression);
    cout << "------------------------" << endl;

    for (int i = 0; i < userExpression.length(); i++)
    {

        if ( userExpression[i] == '(' )
        {
            //cout << "[" << i << "]Debug(a): Pushing --> " << userExpression[i] << endl;
            iStack.push(userExpression[i]);
            lFound = true;
            //cout << "[" << i << "]Debug(a): Stack empty --> " << boolalpha << iStack.empty() << endl;
            //cout << "[" << i << "]Debug(a): lFound --> " << boolalpha << lFound << endl << endl;
        }

        else if (userExpression[i] == ')' && iStack.empty())
                    {
                        //cout << "Running ... ... .." << endl;
                        malForm = true;
                        break;
                    }

        else if ( userExpression[i] == ')' && !iStack.empty() && lFound)
        {
            //cout << "[" << i << "]Debug(b): Popping --> " << userExpression[i] << endl;
            iStack.pop();
            //cout << "[" << i << "]Debug(b): Stack empty --> " << boolalpha << iStack.empty() << endl;
            //cout << "[" << i << "]Debug(b): lFound --> " << boolalpha << lFound << endl << endl;
        }

    }

    //cout << "Debug(c): Stack empty --> " << boolalpha << iStack.empty() << endl;
    //cout << "Debug(c): lFound --> " << boolalpha << lFound << endl << endl;

    if ( iStack.empty() && lFound && !malForm )
        cout << "Balanced Parenthesis " << endl;

    else
        cout << "Unbalanced Parenthesis " << endl;

    return 0;
}

    stack<char> iStack;
    string userExpression;
    bool lFound = false;
    int lCount = 0,
        rCount = 0;

    cout << "Enter expression: ";
    getline(cin, userExpression);
    cout << "------------------------" << endl;

    for (int i = 0; i < userExpression.length(); i++)
    {

        if ( userExpression[i] == '(' )
        {
            cout << "[" << i << "]Debug(1): Pushing --> " << userExpression[i] << endl;
            iStack.push(userExpression[i]);
            lFound = true;
            cout << "[" << i << "]Debug(1): Stack empty --> " << boolalpha << iStack.empty() << endl;
            cout << "[" << i << "]Debug(1): lFound --> " << boolalpha << lFound << endl << endl;
        }

        else if ( userExpression[i] == ')' && !iStack.empty() && lFound)
        {
            cout << "[" << i << "]Debug(2): Popping --> " << userExpression[i] << endl;
            iStack.pop();
            cout << "[" << i << "]Debug(2): Stack empty --> " << boolalpha << iStack.empty() << endl;
            cout << "[" << i << "]Debug(2): lFound --> " << boolalpha << lFound << endl << endl;
        }
    }

    cout << "Debug(3): Stack empty --> " << boolalpha << iStack.empty() << endl;
    cout << "Debug(3): lFound --> " << boolalpha << lFound << endl << endl;

    if (!lFound)
        cout << "No Parenthesis Found " << endl;

    else if ( iStack.empty() && lFound && lCount == rCount)
        cout << "Balanced Parenthesis " << endl;

    else
        cout << "Unbalanced Parenthesis " << endl;

    return 0;
}
